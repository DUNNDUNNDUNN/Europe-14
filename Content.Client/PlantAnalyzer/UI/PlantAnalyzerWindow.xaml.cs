using Content.Shared.PlantAnalyzer;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Shared.Prototypes;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client.PlantAnalyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class PlantAnalyzerWindow : FancyWindow
{
    private readonly IEntityManager _entityManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IPrototypeManager _prototypes;
    private readonly IResourceCache _cache;
    private readonly ButtonGroup _buttonGroup = new();

    public PlantAnalyzerWindow(PlantAnalyzerBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();
        _spriteSystem = _entityManager.System<SpriteSystem>();
        _prototypes = dependencies.Resolve<IPrototypeManager>();
        _cache = dependencies.Resolve<IResourceCache>();

        OnButton.Group = _buttonGroup;
        OffButton.Group = _buttonGroup;

        OnButton.OnPressed += _ => owner.AdvPressed(true); //-> PABUI.cs
        OffButton.OnPressed += _ => owner.AdvPressed(false);
    }
    public void Populate(PlantAnalyzerScannedSeedPlantInformation msg)
    {
        var target = _entityManager.GetEntity(msg.TargetEntity);
        Title = Loc.GetString("plant-analyzer-interface-title");
        if (target == null)
        {
            return;
        }
        NoData.Visible = false;

        if (msg.ScanMode)//switch display to msg setting from msg
        {
            OnButton.ToggleMode = true;
            OnButton.Pressed = true;
        }
        else
        {
            OffButton.ToggleMode = true;
            OffButton.Pressed = true;
        }
        PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-seed", ("seedName", msg.SeedName));
        if (msg.IsTray) PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-plant", ("seedName", msg.SeedName));

        //Basics
        Yield.Text = Loc.GetString("plant-analyzer-plant-yield-text", ("seedYield", msg.SeedYield));
        Potency.Text = Loc.GetString("plant-analyzer-plant-potency-text", ("seedPotency", msg.SeedPotency));
        Repeat.Text = Loc.GetString("plant-analyzer-plant-harvest-text", ("plantHarvestType", msg.Repeat));
        Chemicals.Text = Loc.GetString("plant-analyzer-plant-chemistry-text", ("seedChem", msg.SeedChem));
        Gases.Text = Loc.GetString("plant-analyzer-plant-exude-text", ("exudeGases", msg.ExudeGases));
        Lifespan.Text = "Lifespan: " + msg.Lifespan;
        Maturation.Text = "Maturation: " + msg.Maturation;
        GrowthStages.Text = "GrowthStages: " + msg.GrowthStages;
        //Tolerances       
        NutrientUsage.Text = "Nutrient usage: " + msg.NutrientConsumption;
        WaterUsage.Text = "Water usage: " + msg.WaterConsumption;
        IdealHeat.Text = "Ideal heat: " + msg.IdealHeat;
        HeatTolerance.Text = "HeatTolerance: " + msg.HeatTolerance;
        IdealLight.Text = "IdealLight: " + msg.IdealLight;
        LightTolerance.Text = "Lighttolerance: " + msg.LightTolerance;
        ToxinsTolerance.Text = "ToxinsTolerance: " + msg.ToxinsTolerance;
        LowPressureTolerance.Text = "LowPressureTolerance: " + msg.LowPresssureTolerance;
        HighPressureTolerance.Text = "HighPressureTolerance: " + msg.HighPressureTolerance;
        PestTolerance.Text = "PestTolerance: " + msg.PestTolerance;
        WeedTolerance.Text = "WeedTolerance: " + msg.WeedTolerance;
        //Misc
        Traits.Text = Loc.GetString("plant-analyzer-plant-mutations-text", ("traits", msg.SeedMutations));
        PlantSpeciation.Text = "Possible subtypes: " + msg.PlantSpeciation;
    }

}
